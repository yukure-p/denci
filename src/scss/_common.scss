@charset "utf-8";
/*////////////////////////////////////////////////////

  変数、mixin、プレースホルダー 定義　適宜変更・追加すること

////////////////////////////////////////////////////*/
//　==================================================
//　画像
//　==================================================
$icoGnav:'/common/img/sprite_gNav01.png';
$icoSprite01:'/common/img/sprite_ico01.png';
:root {

  // テーマカラー
  --thema-color01: #ffe404;

  // フォントカラー
  --font-color01: #333333;//
  --font-color02: #808080;//data
  // --font-color03: #fff;//
  // --font-color04: #bfbfbf;//
  // --font-color05:#656565;//list-tit a のカラー

  // 背景カラー
  --bg-color01:#f6f5ed;//背景
  --bg-color02: #333333;//
  --bg-color03: #fff;//
  --bg-color04: #e9e9e9;
  // --bg-color05: #F5F5F5;
  // --bg-color06: #535353;
  // --bg-color07: #f3f3f3;
  // --bg-color08: #cacaca;



  // ボーダーカラー
  --border-color01: #333333;
  --border-color02: #ffffff;
  // --border-color02: #333333;//サイドメニューBTN
  // --border-color03: #d8d8d8;//タイトル下のライン　フッターのライン
  // --border-color04: #fff;//スマホメニュー検索結果 メニューライン



  // ポイントカラー
  --point-color01: #333333;

  // リンクカラー
  --link-color01: #808080;//リンクライン
  --link-color02: #f3f3f3;//リンク背景
  --link-color03: #333333;//
  // フォントサイズ
  --fSize-7: calc((9* 0.1) * 1rem);
  --fSize-6: calc((10* 0.1) * 1rem);
  --fSize-5: calc((11* 0.1) * 1rem);
  --fSize-4: calc((12* 0.1) * 1rem);
  --fSize-3: calc((13* 0.1) * 1rem);
  --fSize-2: calc((14* 0.1) * 1rem);
  --fSize-1: calc((15* 0.1) * 1rem);
  --fSize: calc((16* 0.1) * 1rem);
  --fSize1: calc((17* 0.1) * 1rem);
  --fSize2: calc((18* 0.1) * 1rem);
  --fSize3: calc((19* 0.1) * 1rem);
  --fSize4: calc((20* 0.1) * 1rem);
  --fSize5: calc((21* 0.1) * 1rem);
  --fSize6: calc((22* 0.1) * 1rem);
  --fSize7: calc((23* 0.1) * 1rem);
  --fSize8: calc((24* 0.1) * 1rem);
  --fSize9: calc((25* 0.1) * 1rem);
  --fSize10: calc((26* 0.1) * 1rem);
  --fSize11: calc((27* 0.1) * 1rem);
  --fSize12: calc((28* 0.1) * 1rem);
  --fSize13: calc((29* 0.1) * 1rem);
  --fSize14: calc((30* 0.1) * 1rem);
  --font-entry: calc((34* 0.1) * 1rem);//記事ページ見出し
  --EnfontS: calc((32* 0.1) * 1rem);
  --EnfontR: calc((34* 0.1) * 1rem);
  --EnfontL: calc((36* 0.1) * 1rem);
  --EnfontXL: calc((40* 0.1) * 1rem);
  --MVfont: calc((60* 0.1) * 1rem);
  --font404: calc((180* 0.1) * 1rem);


  // コンテンツ幅
  --cn-max-width: 1440px;
  --local-max-width: 1240px;
  --cniW: 975px;
  --cn-width:calc(1340 / 1440 * 100%);
  --cn-sp-width:90%;
  // ヘッダー
  --header-height:180px;
  --header-height-scroll:120px;

  //サイド
  --asW: 425px;
  //スペース
  --spaceS: 10px;
  --spaceR: 20px;
  --spaceM: 30px;
  --spaceL: 40px;
  --spaceLL: 50px;
  --spaceXL: 60px;//
  --spaceContent: 120px;//
  --spaceContentSP: 40px;///
  --nav-width:120px; //
  --logo-width:130px;//
  --sp-nav-lang-width:60px; //
  --sp-nav-gnav-width:60px; //
}



//　==================================================
//　フォント
//　==================================================

// 英語フォントのバリエーション
@mixin english($weight: 300){
  font-family:'nimbus-sans,sans-serif';
  font-weight: $weight;
  font-style: normal;
}

// フォントサイズのミックスイン指定
@mixin fz($size){
  font-size: $size + px;
  font-size: ($size * 0.1) * 1rem;
}


//　==================================================
//　メディアクエリ設定
//　==================================================
@mixin media($point){
  // @if $point == spS{
  //   @media only screen and (max-width:320px){
  //     @content;
  //   }
  // }

  @if $point == spMS{
    @media only screen and (max-width:557px){
      @content;
    }
  }@else if $point == sp{
    @media only screen and (max-width:767px){
      @content;
    }
  }@else if $point == tablet{
    @media only screen and (min-width: 768px) and (max-width:1024px){
      @content;
    }
  }@else if $point == pc{
    @media only screen and (min-width:1025px){
      @content;
    }
  }@else if $point == pcL{
    @media only screen and (min-width:1540px){
      @content;
    }
  }@else if $point == print{
    @media print{
      @content;
    }
  }

}

// PC：設定なし（実質1025px以上）
// タブレット：1024px [max-width : 1024px]
// スマートフォン：599px [max-width : 599px]

//　==================================================
//　プレースホルダー
//　==================================================

//clearfix
%clearfix {
  *zoom: 1;
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}


//　==================================================
//　汎用mixin
//　==================================================

// opacity 例：@include opacity(0.8);
@mixin opacity($opacity) {
  opacity: $opacity;
  filter: alpha(opacity=($opacity * 100));
}

// box-shadow（ボックスシャドウ）
@mixin box-shadow($property: 0px 3px 10px 0px rgba($baseColor02,.2)){
  box-shadow: $property;
}

//　box-sizing
@mixin box-sizing($property: border-box){
  box-sizing: $property;
}

//　scale(スケール)
@mixin scale($property: 1.1){
  -webkit-transform: scale($property,$property);
  -moz-transform: scale($property,$property);
  -ms-transform: scale($property,$property);
  -o-transform: scale($property,$property);
  transform: scale($property,$property);
}

// bgSize(背景画像のサイズ)
@mixin bgSize($property: auto) {
  -webkit-background-size: $property;
  -moz-background-size: $property;
  -o-background-size: $property;
  background-size: $property;
}

// vertical-align（天地の中央に配置）
@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// gradient（グラデーション） 例：@include gradient($property, vertical);
@mixin gradient($property, $orientation){
  @if $orientation == vertical{
  // vertical
    background: linear-gradient(to bottom, $property);
  }@else if $orientation == horizontal{
  // horizontal
    background: linear-gradient(to right, $property);
  }
  @else{
  // radial
    background: radial-gradient(ellipse at center, $property);
  }
}

// arrow やじるしのスタイル 例：@include arrow($baseColor01, right, 6px, 5px, inline-block); デフォルトでは右向きやじるし
@mixin arrow($color: $pointColor01, $type: right, $base: 9px, $height: 6px, $display: block){
  @if $type == right{
    border-width: $base* 0.5 0 $base* 0.5 $height;
    border-color: transparent transparent transparent $color;
  }@else if $type == left{
    border-width: $base* 0.5 $height $base* 0.5 0;
    border-color: transparent $color transparent transparent ;
  }@else if $type == top {
    border-width: 0 $base* 0.5 $height;
    border-color: transparent transparent $color;
  }@else {
    border-width: $height $base* 0.5 0;
    border-color: $color transparent transparent;
  }
  display: $display;
  content: '';
  width: 0;
  height: 0;
  border-style: solid;
}

// transition（CSSアニメーション）
@mixin transition($property: all, $time: 0.7s, $timing: ease) {
  transition: $property $time $timing;
}

// rotate 回転スタイル
@mixin rotate($origin: left center, $property: 6deg) {
  -webkit-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
  -webkit-transform: rotate($property);
  -ms-transform: rotate($property);
  transform: rotate($property);
}

// translateX,Y 移動スタイル
@mixin translate ($x:0, $y:0) {
  -webkit-transform: translateX($x);
  -moz-transform: translateX($x);
  transform: translateX($x);
  -webkit-transform: translateY($y);
  -moz-transform: translateY($y);
  transform: translateY($y);
}

// flexbox（フレックスボックス）
@mixin flexbox{
  display:-webkit-box; // old
  display:-webkit-flex; // new
  display:flex; // new
}

// flex-order（表示の順番）
@mixin flex-order($order:3){
  -webkit-box-ordinal-group: $order; // old
  -webkit-order: $order; // new
  order: $order; // new
}

// flex-direction（表示の方向） $directionはcolumn、row、column-reverse、row-reverseから選択
@mixin flex-direction($direction:row){
  -webkit-flex-direction:$direction;
  flex-direction:$direction;
}

// flex-align(子要素の配置) $alignはcenter,start,end,stretchから選択
@mixin flex-align($align: center){
  -webkit-align-items: $align;
  align-items: $align;
}

// flex-self(子要素の配置) $alignはcenter,flex-start,flex-end,stretchから選択
@mixin flex-self($align: center){
  -webkit-align-self: $align;
  align-self: $align;
}



// flex-wrap(折り返し設定) nowrap,wrap,wrap-reverse
@mixin flex-wrap($wrap:wrap){
  -webkit-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// justify-content(横位置) center,space-between,space-around
@mixin flex-justify-content($justify:space-between){
  -webkit-justify-content: $justify;
  justify-content: $justify;
}

@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }
}
@mixin animation($property){
  animation: $property;
  animation-fill-mode: both;
}


// position sticky
@mixin sticky{
  position: -webkit-sticky;
  position: sticky;
}
